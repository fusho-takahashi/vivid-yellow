---
import { getPostsByTag, getTags } from '../../lib/microcms';
import type { Post, Tag } from '../../types/blog';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const tagsResponse = await getTags();
  return tagsResponse.contents.map((tag: Tag) => ({
    params: { tag: tag.id },
  }));
}

const { tag } = Astro.params;
const postsResponse = await getPostsByTag(tag as string);
const posts: Post[] = postsResponse.contents;

const tagsResponse = await getTags();
const currentTag = tagsResponse.contents.find((t: Tag) => t.id === tag);
---

<Layout 
	title={`${currentTag?.name}の記事一覧 | VIVID YELLOW`} 
	description={`${currentTag?.name}タグの記事一覧`}
>
	<section class="posts">
		<div class="page-header">
			<h2>
				<span class="tag-name">{currentTag?.name}</span>の記事一覧
			</h2>
			<p class="post-count">{posts.length}件の記事</p>
		</div>

		{posts.length === 0 ? (
			<div class="no-posts">
				<p>このタグの記事がありません。</p>
				<a href="/tags" class="back-link">← タグ一覧に戻る</a>
			</div>
		) : (
			<>
				<div class="post-list">
					{posts.map((post) => (
						<article class="post-card">
							<h3>
								<a href={`/posts/${post.id}`}>{post.title}</a>
							</h3>
							<time datetime={post.publishedAt}>
								{new Date(post.publishedAt).toLocaleDateString('ja-JP')}
							</time>
							{post.tags && post.tags.length > 0 && (
								<div class="tags">
									{post.tags.map((postTag) => (
										<a href={`/tags/${postTag.id}`} class="tag">
											{postTag.name}
										</a>
									))}
								</div>
							)}
						</article>
					))}
				</div>
				<div class="navigation">
					<a href="/tags" class="back-link">← タグ一覧に戻る</a>
				</div>
			</>
		)}
	</section>
</Layout>
